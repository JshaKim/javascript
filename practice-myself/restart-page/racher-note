1. 자바스크립트가 뭐야?

    (1) JavaScript는 웹 페이지를 동적으로 만들고 상호작용을 추가하는 데 사용되는 스크립트 언어입니다.
        스크립트 언어는 뭐야?
            - 응용 소프트웨어를 제어하는 컴퓨터 프로그래밍 언어, 스크립트 언어는 다른 응용 프로그램 안에 삽입되어 해석되는 방식으로 작동함.
            (자바스크립트. 제이쿼리, 제이에스피, 피에치피, 파이썬, 루비)
                응용프로그램은 뭐야?
                    - 운영 체제에서 실행되는 모든 소프트웨어를 뜻함.

    - HTML과 CSS와 함께 웹 개발의 핵심 요소 중 하나입니다.



    (2) 기본 구조
        - JavaScript 코드는 <script> 태그 내에 작성됩니다.
        - <script> 태그는 HTML 파일의 <head> 또는 <body> 부분에 배치할 수 있습니다.



    (3) 변수와 데이터 타입
        - 변수는 var, let, const 키워드로 선언합니다.
            var, let, const 쓰임새는?
            - var:
                ES6 이전에 주로 사용되던 변수 선언 키워드. 재선언 가능, 전역 범위 또는 함수 범위를 가짐.
                호이스팅이 발생하여 선언 시점에서 초기화되지 않고 undefined로 초기화.
                블록 스코프를 가지지 않으므로 { } 블록 내에서 선언된 변수도 외부에서 접근 가능한 취약점 있음.
                사용을 피하는 추세이며, 의도치 않은 변수 재선언이나 값 덮어쓰기로 인한 오동작을 방지하기 위해 다른 키워드를 사용할 것.
            - let:
                ES6에서 도입된 새로운 변수 선언 키워드. 재선언 불가능하며, 블록 스코프를 가짐. 
                한 번 선언한 변수를 다시 같은 스코프에서 선언할 수 없음. 재할당은 가능하며, 호이스팅이 발생하지만 초기화는 선언 라인에서 가능함.
            - const:
                블록 스코프 상수를 선언하는 키워드. 한 번 할당된 값을 변경할 수 없음.
                상수로 사용할 값에는 const를 사용하여 의도적으로 재할당을 방지할 수 있음.
                따라서 최근에는 var보다는 let이나 const를 사용하여 코딩하는 추세임.

        - 데이터 타입에는 숫자, 문자열, 불리언, 객체, 배열 등이 있습니다.



    (4) 조건문과 반복문
        - if, else if, else를 사용하여 조건문을 작성합니다.
        - for, while을 사용하여 반복문을 작성합니다.
            java와 조건이 같은지?
                - Java에서는 중괄호 { }를 사용하여 코드 블록을 정의하지만, JavaScript에서는 선택적으로 사용 가능. 단일 문장일 경우 중괄호 없이도 작동 가능.
                - JavaScript의 for...in과 for...of 반복문은 Java에는 없는 기능임. 이들은 객체의 속성이나 배열의 요소를 반복하는 데 사용됨.


    
    (5) 함수
        - 함수는 function 키워드로 정의하며, 재사용 가능한 코드 블록입니다.
            - 함수 정의하는 방법, 사용하는 방법은?

            <1> 함수 정의하기:
            함수는 특정 작업을 수행하거나 값을 계산하는 명령문의 집합입니다.
            함수를 정의할 때 function 키워드를 사용합니다.
            함수의 이름과 매개변수를 지정하고 중괄호 { } 내에 함수의 코드를 작성합니다.
            
            <예시>
            function square(number) {
                return number * number;
            }

            
            <2> 함수 호출하기:
            함수를 정의했다면 해당 함수를 호출하여 실행합니다.
            함수를 호출할 때 인수(매개변수)를 전달합니다.

            <예시>
            const result = square(5); // 5의 제곱인 25를 반환
            console.log(result); // 25 출력


            <3> 함수의 스코프 (범위) 알기:
            함수 내에서 정의된 변수는 해당 함수의 스코프 내에서만 유효합니다.
            함수 외부에서는 해당 변수에 접근할 수 없습니다.


            <4> return 이용하기:
            return 문은 함수가 반환하는 값을 지정합니다.
            함수 내에서 return을 사용하여 값을 반환하면 해당 값을 함수 호출 결과로 받을 수 있습니다.


            <5> 재귀 함수 (함수의 반복) 알기:
            함수 내에서 자기 자신을 호출하는 것을 재귀 함수라고 합니다.
            
            <예시>
            function factorial(n) {
                return n < 2 ? 1 : n * factorial(n - 1);
            }
            console.log(factorial(3)); // 3! = 6 출력


            <6> 객체 생성자 함수 사용법:
            객체의 속성이 함수인 것을 메서드(Method)라고 합니다.
            객체 생성자 함수를 사용하여 객체를 생성하고 메서드를 추가할 수 있습니다.
   
        - 화살표 함수(=>)도 사용할 수 있습니다.



    (6) 객체와 클래스
        - 객체는 속성과 메서드를 포함하는 데이터 구조입니다.
        - 클래스는 객체를 생성하기 위한 템플릿입니다.



    (7) 이벤트 처리
        - 웹 페이지에서 발생하는 이벤트(클릭, 입력 등)를 처리하는 방법을 배웁니다.
        - addEventListener를 사용하여 이벤트를 감지하고 처리합니다.
            addEventListener가 뭐야?
                - addEventListener는 자바스크립트에서 이벤트를 등록하는 가장 권장되는 방식
                이 메서드를 사용하면 다음과 같은 장점이 있음

                <1> 다수의 수신기 추가 가능:
                하나의 이벤트 유형에 대해 다수의 수신기를 부착할 수 있습니다.
                이는 라이브러리, JavaScript 모듈 등 다른 코드와 충돌하지 않고 동작해야 하는 코드에 특히 중요합니다.

                <2> 이벤트 전파 단계 조절 가능:
                addEventListener()를 사용하면 수신기가 어떤 이벤트 전파 단계 (캡처링 vs. 버블링)에 동작해야 하는지 조절할 수 있습니다.
                이는 onXYZ 속성과 달리 더 세밀한 제어를 가능하게 합니다.

                    캡처링과 버블링이 뭐야?
                        - 이벤트가 DOM 트리에서 전파되는 방식을 설명하는 개념. 이벤트가 발생한 요소에서 시작하여 상위 요소 또는 하위 요소로 이벤트를 전파하는  방향을 나타냄. 이벤트 캡처링과 버블링은 이벤트가 어떤 순서로 전파되는지를 이해하는 데 중요한 개념으로 이벤트 핸들러를 등록할 때 이러한 단계를 고려하여 원하는 동작을 구현할 수 있음.

                        캡처링 (Capturing):
                        이벤트가 발생한 요소의 최상위 부모(일반적으로 window 객체)에서 시작하여 이벤트가 발생한 요소까지 이벤트를 전파합니다.
                        캡처링 단계에서 등록된 이벤트 핸들러가 실행됩니다. 이벤트가 발생한 요소에서부터 상위 요소로 이동하는 과정입니다.

                        버블링 (Bubbling):
                        이벤트가 발생한 요소에서 시작하여 최상위 부모(일반적으로 window 객체)까지 이벤트를 전파합니다.
                        버블링 단계에서 등록된 이벤트 핸들러가 실행됩니다. 이벤트가 발생한 요소에서부터 상위 요소로 이동한 후 다시 하위 요소로 이동하는 과정입니다.

                    onXYZ 속성은 뭐야?
                        - 이벤트 핸들러(Event Handler)를 지정하는 데 사용되는 속성으로 이벤트 핸들러는 특정 이벤트가 발생했을 때 실행되는 함수를 나타냄. onXYZ 속성은 다양한 이벤트 유형에 대해 사용됨. 그러나 addEventListener()를 사용하는 것이 더 권장됨. addEventListener()를 사용하면 이벤트 핸들러를 동적으로 추가 / 제거 및 세밀한 제어 가능.

                <3> HTML과 SVG 요소 외에도 사용 가능:
                addEventListener()는 HTML과 SVG 요소가 아니어도 이벤트 대상이라면 사용할 수 있습니다.

                    SVG는 뭐야?
                        -  SVG는 웹 등에서 스크립트가 가능한 다목적 벡터 포맷의 필요를 위해 제작됨. CSS, DOM, SMIL과 호환 가능하며 SVG 형식의 파일은 어도비 일러스트레이터 등의 벡터 드로잉 프로그램이나 메모장, 문서 편집기 등에서도 작업이 가능하다. 
                        또한 확대나 축소를 해도 픽셀이 깨지지 않고 화질이 유지되며 용량이 PNG, GIF보다 작고 중첩된 경로, 알파 마스크, 애니메이션, 다양한 그래픽 명령어, 하이퍼링크 등의 기능을 지원함.
                        - 그러나 SVG는 이미지에 사용될 경우 보안 위험을 가질 수 있으며, 스크립트나 CSS를 호스팅하여 크로스 사이트 스크립팅 공격 또는 기타 취약점을 유발할 수 있음. 



    (8) 브라우저와 상호작용
        - JavaScript를 사용하여 HTML 요소를 동적으로 조작하고, 데이터를 가져오고, 서버와 통신합니다.

            자바스크립트에서 HTML 요소를 동적으로 만들 수 있는 원리는?
                - JavaScript를 사용하여 HTML 요소를 동적으로 조작하는 원리는 다음과 같습니다:

                    <1> HTML 요소 식별:
                    먼저, JavaScript에서 조작하려는 HTML 요소를 식별해야 합니다.
                    이를 위해 getElementById(), getElementsByClassName(), getElementsByTagName() 등의 메서드를 사용합니다.
                    예를 들어, 특정 ID를 가진 요소를 찾을 때는 getElementById("my-id")를 사용합니다.

                    <2> 요소 속성 및 스타일 변경:
                    식별한 HTML 요소의 속성을 변경하거나 스타일을 조작할 수 있습니다.
                    예를 들어, element.style.color = 'blue'와 같이 요소의 텍스트 색상을 변경할 수 있습니다.

                    <3> 이벤트 리스너 추가:
                    사용자 상호작용에 응답하기 위해 이벤트 리스너를 추가합니다.
                    예를 들어, 버튼 클릭 시 특정 함수를 실행하도록 onclick 이벤트 리스너를 추가할 수 있습니다.

                    <4> 새로운 요소 생성:
                    JavaScript를 사용하여 새로운 HTML 요소를 동적으로 생성할 수 있습니다.
                    document.createElement('tag-name') 메서드를 사용하여 요소를 생성하고, appendChild()를 사용하여 부모 요소에 추가합니다.

                    <5> 기존 요소 제거:
                    removeChild() 메서드를 사용하여 기존 HTML 요소를 제거할 수 있습니다.

                    이와 같은 방법으로 JavaScript를 사용하여 HTML 요소를 동적으로 조작하면 웹 페이지를 더 동적이고 상호작용적으로 만들 수 있습니다!



2. 왜 자바스크립트를 배워야 해?

    (1) 웹 개발:
        JavaScript는 웹 프론트엔드 개발에서 필수적인 언어입니다.
        웹 페이지를 동적으로 만들고 상호작용을 추가하는 데 사용됩니다.

    (2) 다양한 플랫폼에서 사용:
        웹 브라우저, 서버 사이드, 모바일 앱 등 다양한 플랫폼에서 JavaScript를 사용할 수 있습니다.
        
    (3) 인기 있는 프레임워크 및 라이브러리:
        React, Angular, Vue.js 등의 프론트엔드 라이브러리를 사용하기 위해서는 JavaScript를 알아야 합니다.

            React:
                UI 라이브러리: React는 사용자 인터페이스를 구축하기 위한 라이브러리입니다.
                가상 DOM (Virtual DOM): 변경된 부분만 업데이트하여 성능을 최적화합니다.
                컴포넌트 기반 개발: 재사용 가능한 컴포넌트를 만들고 조합하여 애플리케이션을 구축합니다.
                상태 관리: Redux, MobX 등과 함께 상태 관리를 할 수 있습니다.
                라우팅: React Router를 사용하여 클라이언트 사이드 라우팅을 구현할 수 있습니다.
                서버 사이드 렌더링 (SSR): 서버에서 초기 렌더링을 지원합니다.

            Angular:
                전체 프론트엔드 프레임워크: Angular는 완전한 프론트엔드 프레임워크로, 컴포넌트, 라우팅, 상태 관리, 템플릿, 서비스 등을 제공합니다.
                MVC 아키텍처: Angular는 Model-View-Controller 아키텍처를 따릅니다.
                타입스크립트 사용: Angular는 타입스크립트를 기본 언어로 사용합니다.
                강력한 폼 처리: 폼 유효성 검증, 커스텀 폼 컨트롤, 폼 배열 등을 지원합니다.

            Vue.js:
                진보적인 프레임워크: Vue.js는 진보적인 프레임워크로, 점진적으로 적용할 수 있습니다.
                단순한 API: 직관적인 문법과 API를 가지고 있어 쉽게 시작할 수 있습니다.
                컴포넌트 기반 개발: Vue 컴포넌트를 조합하여 애플리케이션을 구축합니다.
                상태 관리: Vuex를 사용하여 상태 관리를 할 수 있습니다.
                라우팅: Vue Router를 사용하여 클라이언트 사이드 라우팅을 구현할 수 있습니다.

    (4) 커뮤니티와 생태계:
        JavaScript는 큰 커뮤니티와 활발한 생태계를 가지고 있습니다.
        다양한 자료와 지식을 공유하고 학습할 수 있습니다.

    (5) 채용 시장에서의 가치:
        JavaScript를 잘 다루는 개발자는 채용 시장에서 높은 가치를 가집니다.

    (6) 모던 웹 개발에 필수적:
        웹 애플리케이션은 JavaScript 없이는 상상할 수 없습니다.



3. 헤드에 탑 다운 메뉴바와 헤더에 이미지가 좌측으로 흘러가는 슬라이드 에니메이션이 구현된 게시판 형태의 단순한 홈페이지 제작 플랜을 만들어줘.

    (1) HTML 구조 설정:
        HTML 파일에서 헤더, 메뉴바, 이미지, 게시판 등의 요소를 생성합니다.

    (2) CSS 스타일링:
        헤더와 메뉴바에 스타일을 적용합니다.
        이미지와 게시판 요소에도 스타일을 추가합니다.

    (3) 메뉴바 구현:
        탑 다운 메뉴바를 만듭니다.
        메뉴 항목을 클릭하면 해당 섹션으로 스크롤되도록 구현합니다.

    (4) 이미지 슬라이드 애니메이션:
        이미지를 좌측으로 흘러가는 슬라이드 애니메이션을 추가합니다.
        CSS 트랜지션 또는 애니메이션을 사용하여 이미지를 움직입니다.

    (5) 게시판 구현:
        게시판 요소를 생성하고 스타일을 적용합니다.
        게시글 목록을 표시하고 클릭 시 상세 페이지로 이동하도록 링크를 추가합니다.
        
    (6) JavaScript 추가 (선택 사항):
        메뉴바와 이미지 슬라이드를 동적으로 제어하려면 JavaScript를 사용합니다.
        스크롤 이벤트를 감지하여 메뉴바를 고정하거나 숨기는 기능을 추가할 수 있습니다.
